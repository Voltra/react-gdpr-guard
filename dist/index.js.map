{"version":3,"file":"index.js","sources":["../node_modules/babel-plugin-transform-async-to-promises/helpers.mjs","../src/ManagerWrapper.ts","../src/SaviorWrapper.ts","../src/index.ts"],"sourcesContent":["// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[_asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, result);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\tvar result = _entry(_this);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tresult.then(returnValue, function(error) {\n\t\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturnValue(result);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","import type {\n\tGdprManager,\n\tGdprManagerRaw,\n\tGdprGuard,\n\tGdprGuardGroup,\n\tGdprStorage,\n} from \"gdpr-guard\";\nimport type { GdprManagerEventHub } from \"gdpr-guard/dist/GdprManagerEventHub\";\n\nimport type { MethodNamesOf } from \"./typings\";\n\nexport class ManagerWrapper {\n\tprotected state: GdprManagerRaw;\n\n\tconstructor(protected _manager: GdprManager) {\n\t\tthis.state = this.generateRawManager();\n\t}\n\n\tpublic get manager(): GdprManager {\n\t\treturn this._manager;\n\t}\n\n\tpublic get materializedState(): GdprManagerRaw {\n\t\treturn this.state;\n\t}\n\n\tpublic triggerUpdate(): void {\n\t\tthis.state = this.generateRawManager();\n\t}\n\n\tpublic get bannerWasShown(): boolean {\n\t\treturn this.manager.bannerWasShown;\n\t}\n\n\tpublic get events(): GdprManagerEventHub {\n\t\treturn this.manager.events;\n\t}\n\n\tpublic closeBanner(): void {\n\t\tthis.manager.closeBanner();\n\t\tthis.triggerUpdate();\n\t}\n\n\tpublic resetAndShowBanner(): void {\n\t\tthis.manager.resetAndShowBanner();\n\t\tthis.triggerUpdate();\n\t}\n\n\tpublic json(): GdprManagerRaw {\n\t\treturn this.materializedState;\n\t}\n\n\tpublic toString(): string {\n\t\treturn JSON.stringify(this.materializedState);\n\t}\n\n\tpublic disable(target?: string): this {\n\t\treturn this.wrap(\"disable\", target);\n\t}\n\n\tpublic enable(target?: string): this {\n\t\treturn this.wrap(\"enable\", target);\n\t}\n\n\tpublic toggle(target?: string): this {\n\t\treturn this.wrap(\"toggle\", target);\n\t}\n\n\tpublic disableForStorage(storageType: GdprStorage): this {\n\t\tthis.manager.disableForStorage(storageType);\n\t\treturn this;\n\t}\n\n\tpublic enableForStorage(storageType: GdprStorage): this {\n\t\tthis.manager.enableForStorage(storageType);\n\t\treturn this;\n\t}\n\n\tpublic toggleForStorage(storageType: GdprStorage): this {\n\t\tthis.manager.toggleForStorage(storageType);\n\t\treturn this;\n\t}\n\n\tpublic isEnabled(name: string): boolean {\n\t\treturn this.manager.isEnabled(name);\n\t}\n\n\tpublic hasGroup(groupName: string): boolean {\n\t\treturn this.manager.hasGroup(groupName);\n\t}\n\n\tpublic hasGuard(guardName: string): boolean {\n\t\treturn this.manager.hasGuard(guardName);\n\t}\n\n\tpublic getGroup(groupName: string): GdprGuardGroup | null {\n\t\treturn this.manager.getGroup(groupName);\n\t}\n\n\tpublic getGuard(guardName: string): GdprGuard | null {\n\t\treturn this.manager.getGuard(guardName);\n\t}\n\n\tprotected generateRawManager(): GdprManagerRaw {\n\t\treturn this.manager.raw();\n\t}\n\n\tpublic hotswap(newManager: GdprManager): this {\n\t\tthis._manager = newManager;\n\t\tthis.triggerUpdate();\n\t\treturn this;\n\t}\n\n\tprotected wrap(\n\t\tmethod: MethodNamesOf<GdprGuard>,\n\t\ttarget?: string,\n\t\t...args: unknown[]\n\t): this {\n\t\tif (\n\t\t\ttypeof target === \"undefined\" &&\n\t\t\ttypeof this.manager[method] === \"function\"\n\t\t) {\n\t\t\t// False positive of TS2349\n\t\t\tthis.manager[method as unknown as string](...args);\n\t\t\tthis.triggerUpdate();\n\t\t} else if (this.manager.hasGuard(target as string)) {\n\t\t\tconst guard = this.manager.getGuard(target as string);\n\n\t\t\tif (typeof guard?.[method] === \"function\") {\n\t\t\t\t// False positive of TS2349\n\t\t\t\tguard?.[method as unknown as string](...args);\n\t\t\t\tthis.triggerUpdate();\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t}\n}\n","import { GdprSaviorAdapter } from \"gdpr-guard\";\nimport type {\n\tGdprSavior,\n\tGdprManager,\n\tGdprManagerFactory,\n\tGdprManagerRaw,\n} from \"gdpr-guard\";\n\nimport type { ManagerWrapper } from \"./ManagerWrapper\";\n\nexport class SaviorWrapper extends GdprSaviorAdapter {\n\tconstructor(\n\t\tprotected savior: GdprSavior,\n\t\tprotected managerWrapper: ManagerWrapper\n\t) {\n\t\tsuper();\n\t}\n\n\tasync updateSharedManager(manager: GdprManager): Promise<void> {\n\t\tif (this.managerWrapper.manager === manager) return;\n\n\t\tawait this.savior.updateSharedManager(manager);\n\t\tthis.managerWrapper.hotswap(manager);\n\t}\n\n\t/// Delegates\n\tcheck() {\n\t\treturn this.savior.check();\n\t}\n\n\texists(shouldUpdate = true) {\n\t\treturn this.savior.exists(shouldUpdate);\n\t}\n\n\trestore(shouldUpdate = true) {\n\t\treturn this.savior.restore(shouldUpdate);\n\t}\n\n\trestoreOrCreate(factory: GdprManagerFactory) {\n\t\treturn this.savior.restoreOrCreate(factory);\n\t}\n\n\tstore(manager: GdprManagerRaw) {\n\t\treturn this.savior.store(manager);\n\t}\n}\n","import { GdprManager } from \"gdpr-guard\";\nimport { GdprManagerEventHub } from \"gdpr-guard/dist/GdprManagerEventHub\";\nimport { DependencyList, useRef, useCallback, useMemo, useEffect } from \"react\";\n\nimport { ManagerWrapper } from \"./ManagerWrapper\";\nimport { SaviorWrapper } from \"./SaviorWrapper\";\nimport type {\n\tGdprSavior,\n\tGdprGuardRaw,\n\tGdprStorage,\n\tGdprManagerFactory,\n\tGdprGuardHooks,\n\tUseGdpr,\n\tUseSetupGdprEffect,\n\tUseGdprComputed,\n\tUseGdprGuard,\n\tUseGdprGuardEnabledState,\n\tUseGdprManager,\n\tUseGdprSavior,\n\tUseAttachGdprListenersEffect,\n} from \"./typings\";\n\n/**\n * Semantic wrapper around {@link useCallback}\n */\nconst useFunction = <Fn extends (...args: any[]) => any>(\n\tfn: Fn,\n\tdeps: DependencyList = []\n): Fn => {\n\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\treturn useCallback(fn, deps);\n};\n\n/**\n * {@link useEffect} but that will only be triggered after one render/call attempt as already been made\n */\nconst useEffectOnSecondRender = <Fn extends (...args: any[]) => any>(\n\tfn: Fn,\n\tdeps: DependencyList = []\n) => {\n\tconst didMount = useRef(false);\n\n\tuseEffect(() => {\n\t\tif (didMount.current) {\n\t\t\tfn();\n\t\t\treturn;\n\t\t}\n\t\tdidMount.current = true;\n\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [...deps, fn, didMount]);\n};\n\n/**\n * Semantic wrapper around {@link useEffect} used to call a function when one of the dependency changes\n * regardless of whether that dependency is used in the function or not\n */\n// eslint-disable-next-line react-hooks/exhaustive-deps\nconst watch = <Fn extends (...args: any[]) => any>(inputs: DependencyList, fn: Fn) => useEffect(fn, inputs);\n\n/**\n * Create hooks for the gdpr-guard library based on the provided {@link GdprSavior}\n * @param savior - The {@link GdprSavior} to wrap\n * @param managerFactory - A factory to the latest version of your {@link GdprManager}\n * @returns The React hooks associated to that {@link GdprSavior}\n */\nexport const createGdprGuardHooks = (\n\tsavior: GdprSavior,\n\tmanagerFactory: GdprManagerFactory\n): GdprGuardHooks => {\n\t// Use a dummy manager that'll be hotswap later after init\n\tconst dummyManager = GdprManager.create([]);\n\tconst managerWrapper = new ManagerWrapper(dummyManager);\n\n\tconst saviorWrapper = new SaviorWrapper(savior, managerWrapper);\n\n\tconst useGdprSavior: UseGdprSavior = (): GdprSavior => saviorWrapper;\n\n\tconst useGdprManager: UseGdprManager = (): ManagerWrapper => managerWrapper;\n\n\t/**\n\t * For internal uses only\n\t */\n\tconst useWrappedManager = () => useGdprManager().manager;\n\n\tconst useSetupGdprEffect: UseSetupGdprEffect = (\n\t\tonError = (e: unknown) => {}\n\t) => {\n\t\tconst wrappingManager = useGdprManager();\n\t\tconst wrappedManager = useWrappedManager();\n\n\t\tconst restoreManagerOnBoot = useFunction(() => {\n\t\t\t(async () => {\n\t\t\t\ttry {\n\t\t\t\t\tconst manager = await saviorWrapper.restoreOrCreate(\n\t\t\t\t\t\tmanagerFactory\n\t\t\t\t\t);\n\n\t\t\t\t\twrappingManager.hotswap(manager);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tonError(e);\n\t\t\t\t}\n\t\t\t})();\n\t\t}, [wrappingManager]);\n\n\t\tuseEffectOnSecondRender(restoreManagerOnBoot);\n\n\t\t// Auto-close\n\t\twatch([wrappedManager], () => {\n\t\t\tif (wrappingManager.bannerWasShown) {\n\t\t\t\twrappingManager.closeBanner();\n\t\t\t}\n\t\t});\n\t};\n\n\tconst useGdprComputed: UseGdprComputed = <T>(\n\t\tfactory: () => T,\n\t\tdeps: DependencyList = []\n\t): T => {\n\t\tconst manager = useGdprManager();\n\t\tconst fn = useFunction(factory, deps);\n\n\t\treturn useMemo(fn, [manager.materializedState, fn]);\n\t};\n\n\tconst useAttachGdprListenersEffect: UseAttachGdprListenersEffect = (\n\t\tcallback: (eventHub: GdprManagerEventHub) => void\n\t) => {\n\t\tconst wrappedManager = useWrappedManager();\n\n\t\tuseEffect(() => {\n\t\t\tconst { events } = wrappedManager;\n\t\t\tcallback(events);\n\t\t}, [callback, wrappedManager]);\n\t};\n\n\tconst useGdprGuardEnabledState: UseGdprGuardEnabledState = (\n\t\tguardName: string,\n\t\tuseBannerStatus: boolean = false\n\t) => {\n\t\treturn useGdprComputed(() => {\n\t\t\tconst bannerWasShown = !useBannerStatus || managerWrapper.bannerWasShown;\n\n\t\t\treturn (\n\t\t\t\tbannerWasShown &&\n\t\t\t\t(managerWrapper.getGuard(guardName)?.enabled ?? false)\n\t\t\t);\n\t\t}, [guardName, managerWrapper.bannerWasShown]);\n\t};\n\n\tconst useGdprGuard: UseGdprGuard = (guardName: string) => {\n\t\tconst manager = useGdprManager();\n\n\t\tconst guard = useGdprComputed(() => {\n\t\t\treturn manager.getGuard(guardName)?.raw();\n\t\t}, [guardName, manager]) as GdprGuardRaw | null;\n\n\t\tconst enableGuard = useFunction(() => {\n\t\t\tmanager.enable(guardName);\n\t\t}, [guardName, manager]);\n\n\t\tconst disableGuard = useFunction(() => {\n\t\t\tmanager.disable(guardName);\n\t\t}, [guardName, manager]);\n\n\t\tconst toggleGuard = useFunction(() => {\n\t\t\tmanager.toggle(guardName);\n\t\t}, [guardName, manager]);\n\n\t\treturn {\n\t\t\tguard,\n\t\t\tenableGuard,\n\t\t\tdisableGuard,\n\t\t\ttoggleGuard,\n\t\t};\n\t};\n\n\tconst useGdpr: UseGdpr = () => {\n\t\tconst wrapper = useGdprManager();\n\n\t\t// Manager\n\t\tconst manager = useGdprComputed(() => wrapper.materializedState, [wrapper, wrapper.materializedState]);\n\n\t\tconst enableManager = useFunction(() => {\n\t\t\twrapper.enable();\n\t\t}, [wrapper]);\n\n\t\tconst disableManager = useFunction(() => {\n\t\t\twrapper.disable();\n\t\t}, [wrapper]);\n\n\t\tconst toggleManager = useFunction(() => {\n\t\t\twrapper.toggle();\n\t\t}, [wrapper]);\n\n\t\t// Guard/group\n\t\tconst enableGuard = useFunction((guardName: string) => {\n\t\t\twrapper.enable(guardName);\n\t\t}, [wrapper]);\n\n\t\tconst disableGuard = useFunction((guardName: string) => {\n\t\t\twrapper.disable(guardName);\n\t\t}, [wrapper]);\n\n\t\tconst toggleGuard = useFunction((guardName: string) => {\n\t\t\twrapper.toggle(guardName);\n\t\t}, [wrapper]);\n\n\t\tconst guardIsEnabled = useFunction(\n\t\t\t(guardName: string, useBannerStatus: boolean = false) => {\n\t\t\t\tconst bannerWasShown = !useBannerStatus || wrapper.bannerWasShown;\n\t\t\t\treturn bannerWasShown && wrapper.isEnabled(guardName);\n\t\t\t},\n\t\t\t[wrapper]\n\t\t);\n\n\t\t// Storage\n\t\tconst enableForStorage = useFunction((storage: GdprStorage) => {\n\t\t\twrapper.enableForStorage(storage);\n\t\t}, [wrapper]);\n\n\t\tconst disableForStorage = useFunction((storage: GdprStorage) => {\n\t\t\twrapper.disableForStorage(storage);\n\t\t}, [wrapper]);\n\n\t\tconst toggleForStorage = useFunction((storage: GdprStorage) => {\n\t\t\twrapper.toggleForStorage(storage);\n\t\t}, [wrapper]);\n\n\t\tconst closeGdprBanner = useFunction(() => wrapper.closeBanner(), [wrapper]);\n\t\tconst resetAndShowBanner = useFunction(() =>\n\t\t\twrapper.resetAndShowBanner(),\n\t\t\t[wrapper]\n\t\t);\n\t\tconst bannerWasShown = useGdprComputed(\n\t\t\t() => wrapper.bannerWasShown,\n\t\t\t[wrapper]\n\t\t);\n\n\t\treturn {\n\t\t\t// Meta\n\t\t\tcloseGdprBanner,\n\t\t\tresetAndShowBanner,\n\t\t\tbannerWasShown,\n\t\t\t// Manager\n\t\t\tmanager,\n\t\t\tenableManager,\n\t\t\tdisableManager,\n\t\t\ttoggleManager,\n\t\t\t// Guard/group\n\t\t\tenableGuard,\n\t\t\tdisableGuard,\n\t\t\ttoggleGuard,\n\t\t\tguardIsEnabled,\n\t\t\t// Storage\n\t\t\tenableForStorage,\n\t\t\tdisableForStorage,\n\t\t\ttoggleForStorage,\n\t\t};\n\t};\n\n\treturn {\n\t\tuseSetupGdprEffect,\n\t\tuseAttachGdprListenersEffect,\n\n\t\tuseGdprSavior,\n\t\tuseGdprManager,\n\t\tuseGdprComputed,\n\n\t\tuseGdprGuardEnabledState,\n\t\tuseGdprGuard,\n\t\tuseGdpr,\n\t};\n};\n"],"names":["Symbol","iterator","asyncIterator","_manager","this","state","generateRawManager","triggerUpdate","closeBanner","manager","resetAndShowBanner","json","materializedState","toString","stringify","disable","target","wrap","enable","toggle","disableForStorage","storageType","enableForStorage","toggleForStorage","isEnabled","name","hasGroup","groupName","hasGuard","guardName","getGroup","getGuard","raw","hotswap","newManager","method","args","guard","bannerWasShown","events","savior","managerWrapper","_this","updateSharedManager","_this2","check","exists","shouldUpdate","restore","restoreOrCreate","factory","store","GdprSaviorAdapter","fn","deps","managerFactory","GdprManager","create","dummyManager","useGdprManager","useFunction","useSetupGdprEffect","onError","e","useWrappedManager","useRef","useEffect","didMount","current","useEffectOnSecondRender","body","recover","result","saviorWrapper","wrappingManager","then","wrappedManager","useAttachGdprListenersEffect","callback","useGdprSavior","useGdprComputed","useGdprGuardEnabledState","useBannerStatus","_managerWrapper$getGu2","enabled","useGdprGuard","_manager$getGuard","enableGuard","disableGuard","toggleGuard","useGdpr","wrapper","storage","closeGdprBanner","enableManager","disableManager","toggleManager","guardIsEnabled"],"mappings":"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"}